<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.1.1">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>675</x>
      <y>180</y>
      <w>140</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>bg=green
/TypeObject/
--
#name: std::string
#description: std::string
--
+TypeObject()
/+~TypeObject()/
+get_name(result: std::string&amp;): size_t
+get_description(result: std::string&amp;): size_t
+set_name(value: char_t*): size_t
+set_name(value: std::string): size_t
+set_description(value: char_t*): size_t
+set_description(value: std::string): size_t
/+what(out: std::string&amp;): size_t/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>805</x>
      <y>340</y>
      <w>190</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>bg=green
TypeBuilding
--
#max_employees: size_t
#producable: std::vector&lt;bool&gt;
#resources: std::vector&lt;size_t&gt;
#cost: std::vector&lt;size_t&gt;
#building_time: size_t
#living_space: size_t
--
+TypeBuilding()
/+~TypeBuilding()/
+get_max_employees(result: size_t&amp;): size_t
+get_living_space(result: size_t&amp;): size_t
+get_producable(result: std::vector&lt;bool&gt;&amp;): size_t
+get_producable(index: size_t, result: bool&amp;): size_t
+get_resources(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_resources(index: size_t, result: size_t&amp;): size_t
+get_cost(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_cost(index: size_t, result: size_t&amp;): size_t
+get_building_time(result: size_t): size_t
+set_max_employees(value: size_t): size_t
+set_living_space( value: size_t): size_t
+set_producable(value: std::vector&lt;bool&gt;): size_t
+set_producable(index: size_t, value: bool): size_t
+set_resources(value: std::vector&lt;size_t&gt;): size_t
+set_resources(index: size_t, value: size_t): size_t
+set_cost(value: std::vector&lt;size_t&gt;): size_t
+set_cost(index: size_t, value: size_t): size_t
+set_building_time(value: size_t): size_t
/+what(out: std::string&amp;): size_t/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>735</x>
      <y>280</y>
      <w>185</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0;350.0;70.0;350.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>530</x>
      <y>340</y>
      <w>175</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>bg=green
TypeProfession
--
#consumation: std::vector&lt;size_t&gt;
#can_slave: bool
--
+TypeProfession()
/+~TypeProfession()/
+get_consumation(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_consumation(index: size_t, result: size_t&amp;): size_t
+get_can_slave(result: bool&amp;): size_t
+set_consumation(value: std::vector&lt;size_t&gt;): size_t
+set_consumation(inde: size_t, value: size_t&gt;): size_t
+set_can_slave(value: bool): size_t
+what(out: std::string&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>610</x>
      <y>310</y>
      <w>140</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0;260.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>790</x>
      <y>610</y>
      <w>220</w>
      <h>205</h>
    </coordinates>
    <panel_attributes>bg=green
Building
--
#employees_id: std::vector&lt;signed size_t&gt;
#production_queue: std::vector&lt;signed size_t&gt;
#living_space: size_t
#kind: TypeBuilding&amp;
--
+Building(kind: TypeBuilding&amp;)
+~Building();
+get_employees_id(result: std::vector&lt;signed size_t&gt;&amp;): size_t
+get_employees_id(index: size_t, result: signed size_t&amp;): size_t
+get_production_queue(result: std::vector&lt;signed size_t&gt;&amp;): size_t
+get_production_queue(index: size_t, result: signed size_t&amp;): size_t
+add_to_queue(value: signed size_t): size_t
+remove_from_queue(): size_t
+remove_from_queue(index: size_t): size_t
+get_living_space(result: size_t&amp;): size_t
+add_inhabitant(): size_t
+remove_inhabitant(): size_t
+set_employees_id(value: std::vector&lt;signed size_t&gt;): size_t
+set_employess_id(index: size_t, value: signed size_t): size_t
+set_production_queue(value: std::vactor&lt;signed size_t&gt;): size_t
+set_production_queue(index: size_t, value: signed size_t): size_t
+set_living_space(value: size_t&gt;): size_t
+what(out: std::string&amp;): size_t
+produce(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>895</x>
      <y>575</y>
      <w>15</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=*
m2=1</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>350</x>
      <y>645</y>
      <w>85</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>bg=green
PersonalSaga
--
+enemies_killed: size_t
+raids_count: size_t
+gold_looted: size_t
+people_enslaved: size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>510</x>
      <y>500</y>
      <w>220</w>
      <h>475</h>
    </coordinates>
    <panel_attributes>bg=green
Human
--
#name: std::string
#profession: TypeProfession&amp;
#skills: std::vector&lt;size_t&gt;
#saga: PersonalSaga
#combat_stats: CombatStats
#gender: bool
#house_id: signed size_t
--
+Human()
+~Human()
+get_name(result: std::string&amp;): size_t
+get_profession(result: TypeProfession&amp;): size_t
+get_skills(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_skills(index: size_t, result: size_t&amp;): size_t
+get_saga(result: PersonalSaga&amp;): size_t
+get_saga_killed(result: size_t&amp;): size_t
+get_saga_raids(result: size_t&amp;): size_t
+get_saga_looted(result: size_t&amp;): size_t
+get_saga_enslaved(result: size_t&amp;): size_t
+get_combat_stats(result: CombatStats&amp;): size_t
+get_combat_stats_wounds(result: std::pair&lt;size_t, size_t&gt;&amp;): size_t
+get_combat_stats_wounds(index:size_t, result: size_t&amp;): size_t
+get_combat_stats_melee(result: size_t&amp;): size_t
+get_combat_stats_ranged(result: size_t&amp;): size_t
+get_combat_stats_defense(result: size_t&amp;): size_t
+get_combat_stats_initiative(result: size_t&amp;): size_t
+get_gender(result: bool&amp;): size_t
+get_house_id(result: signed size_t&amp;): size_t
+set_name(value: std::string&amp;): size_t
+set_profession(value: TypeProfession&amp;): size_t
+set_skills(value: std::vector&lt;size_t&gt;): size_t
+set_skills(index: size_t, value: size_t): size_t
+set_saga(value: PersonalSaga): size_t
+set_saga_killed(value: size_t): size_t
+set_saga_raids(value: size_t): size_t
+set_saga_looted(value: size_t): size_t
+set_saga_enslaved(value: size_t): size_t
+set_combat_stats(value: CombatStats): size_t
+set_combat_stats_wounds(value: std::pair&lt;size_t, size_t&gt;): size_t
+set_combat_stats_wounds(index: size_t, value: size_t): size_t
+set_combat_stats_melee(value: size_t): size_t
+set_combat_stats_ranged(value: size_t): size_t
+set_combat_stats_defense(value: size_t): size_t
+set_combat_stats_initiative(value: size_t): size_t
+set_gender(value: bool): size_t
+set_house_id(value: signed size_t): size_t
+what(out: std::string&amp;): size_t
+consume(): size_t
+add_kill(): size_t
+add_raid(): size_t
+add_loot(value: size_t); size_t
+add_enslaved(value: size_t): size_t
+wound(): size_t
+raise_melee(): size_t
+raise_ranged(): size_t
+raise_defense(): size_t
+raise_initiative(): size_t
+raise_skill(index: size_t): size_t
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>325</x>
      <y>580</y>
      <w>110</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>bg=green
CombatStats
--
+wounds: std::pair&lt;size_t, size_t&gt;
+melee_attack: size_t
+ranged_attack: size_t
+defense: size_t
+initiative: size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>430</x>
      <y>605</y>
      <w>90</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>160.0;130.0;50.0;130.0;50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>430</x>
      <y>665</y>
      <w>35</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1</panel_attributes>
    <additional_attributes>10.0;10.0;50.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>250</x>
      <y>705</y>
      <w>185</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>bg=green
Inventory
--
#items_id: std::vector&lt;Item*&gt;
--
+Inventory()
+~Inventory()
+get_items_id(result: std::vector&lt;signed size_t&gt;&amp;): size_t
+get_items_id(index: size_t, result: signed size_t&amp;): size_t
+get_melee_bonus(result: size_t&amp;): size_t
+get_ranged_bonus(result: size_t&amp;): size_t
+get_defense_bonus(result: size_t&amp;): size_t
+set_items_id(value: std::vector&lt;signed size_t&gt;): size_t
+set_items_id(index: size_t, value: signed size_t): size_t
+what(out: std::string&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>430</x>
      <y>665</y>
      <w>35</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1</panel_attributes>
    <additional_attributes>10.0;190.0;50.0;190.0;50.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>610</x>
      <y>440</y>
      <w>15</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=*
m2=1</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>635</y>
      <w>150</w>
      <h>235</h>
    </coordinates>
    <panel_attributes>bg=green
Item
--
#name: std::string
#description: std::string
#cost: std::vector&lt;size_t&gt;
#bonuses: CombatStats
--
+Item()
/+~Item()/
+get_name(result: std::string&amp;): size_t
+get_description(result: std::string&amp;): size_t
+get_cost(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_cost(index: size_t, result: size_t&amp;): size_t
+get_bonuses(result: CombatStats&amp;): size_t
+get_bonuses_wounds(result: size_t&amp;): size_t
+get_bonuses_melee(result: size_t&amp;): size_t
+get_bonuses_ranged(result: size_t&amp;): size_t
+get_bonuses_defense(result: size_t&amp;): size_t
+get_bonuses_initiative(result: size_t&amp;): size_t
+set_name(value: std::string): size_t
+set_description(value: std::string): size_t
+set_bonuses(value: CombatStats): size_t
+set_bonuses_wounds(value: size_t): size_t
+set_bonuses_melee(value: size_t): size_t
+set_bonuses_ranged(value: size_t): size_t
+set_bonuses_defense(value: size_t): size_t
+set_bonuses_initiative(value: size_t): size_t
+set_cost(value: std::vector&lt;size_t&gt;): size_t
+set_cost(index: size_t, value: size_t): size_t
+what(out: std::string&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>120</x>
      <y>600</y>
      <w>215</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;10.0;410.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>340</x>
      <y>810</y>
      <w>180</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=-
provides stat bonuses &gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0;340.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>175</x>
      <y>310</y>
      <w>200</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>bg=yellow
IngameStorage
--
+items: std::vector&lt;Item&gt;
+professions: std::vector&lt;TypeProfession&gt;
+buildings: std::vector&lt;TypeBuilding&gt;
#db_name: std::string
--
+IngameStorage()
+IngameStorage(db: std::string)
+~IngameStorage()
+get_item(index: size_t, result: Item&amp;): size_t
+get_profession(index: size_t, result: TypeProfession&amp;): size_t
+get_building(index: size_t, result: TypeBuilding&amp;): size_t
+get_db_name(result: std::string&amp;): size_t
+set_item(value: Item): size_t
+set_profession(value: TypeProfession): size_t
+set_building(value: TypeBuilding): size_t
+set_db_name(value: std::string): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>370</x>
      <y>370</y>
      <w>170</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>lt=-
m1=*
m2=1
contains &gt;</panel_attributes>
    <additional_attributes>320.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>350</x>
      <y>105</y>
      <w>600</w>
      <h>245</h>
    </coordinates>
    <panel_attributes>lt=-
m1=*
m2=1
contains &gt;</panel_attributes>
    <additional_attributes>1180.0;470.0;1180.0;20.0;10.0;20.0;10.0;410.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>340</x>
      <y>445</y>
      <w>180</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=-
provides profession data &gt;</panel_attributes>
    <additional_attributes>340.0;200.0;10.0;200.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>325</x>
      <y>80</y>
      <w>905</w>
      <h>665</h>
    </coordinates>
    <panel_attributes>lt=-
m1=*
m2=1
provides building kind data &gt;</panel_attributes>
    <additional_attributes>1370.0;1300.0;1610.0;1300.0;1610.0;10.0;10.0;10.0;10.0;460.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>725</x>
      <y>670</y>
      <w>75</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>lt=-
m1=*
m2=1
lives in &gt;</panel_attributes>
    <additional_attributes>10.0;20.0;130.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>725</x>
      <y>725</y>
      <w>75</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>lt=-
m1=*
m2=1
works in &gt;</panel_attributes>
    <additional_attributes>10.0;20.0;130.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>860</x>
      <y>940</y>
      <w>270</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>Village
--
#villagers: std::vector&lt;Human*&gt;
#buildings: std::vector&lt;Building*&gt;
#construction: std::vector&lt;ConstructionSite*&gt;  
#resources: std::vector&lt;size_t&gt;
#items: std::vector&lt;size_t&gt;
--
+Village()
+~Village()
+get_villager_by_id(index: signed size_t, result: Human*&amp;): size_t
+get_building_by_id(index: signed size_t, result: Building*&amp;): size_t
+get_construction_site_by_id(index: signed size_t, result: ConstructionSite*&amp;): size_t
+get_resources_by_id(index: signed size_t, result: size_t&amp;): size_t
+get_villagers(result: std::vector&lt;Human*&gt;&amp;): size_t
+get_buildings(result: std::vector&lt;Building*&gt;&amp;): size_t
+get_construction(result: std::vector&lt;ConstructionSite*&gt;&amp;): size_t
+get_resources(result: std::vector&lt;size_t&gt;&amp;): size_t
+add_villager(if_male: bool): size_t
+add_slave(if_male: bool): size_t
+remove_villager(index: signed size_t): size_t
+add_contruction(kind: TypeBuilding&amp;): size_t
+remove_construction(index: signed size_t): size_t
+add_resource(index: signed size_t, amount: size_t): size_t
+remove_resource(index: signed size_t, amount: size_t): size_t
+turn(): size_t
+what(out: std::string&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>975</x>
      <y>855</y>
      <w>15</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1</panel_attributes>
    <additional_attributes>10.0;170.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>725</x>
      <y>820</y>
      <w>265</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=-
m1=*</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;10.0;80.0;80.0;510.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>885</x>
      <y>810</y>
      <w>15</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=-
m1=*</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>145</x>
      <y>750</y>
      <w>115</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=0..*</panel_attributes>
    <additional_attributes>210.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>170</x>
      <y>0</y>
      <w>145</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>Color notation
--
--
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>170</x>
      <y>15</y>
      <w>145</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>Written, tested
bg=green
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>170</x>
      <y>30</y>
      <w>145</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>Written, not tested
bg=cyan
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>170</x>
      <y>45</y>
      <w>145</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>Partially written, not tested
bg=yellow
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>170</x>
      <y>60</y>
      <w>145</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>Not written, not tested
group=1</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
